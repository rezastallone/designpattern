OO Principles

1. Separate what varies and what stays. encapsulate what varies so it wont affect your system when changed.

2. Program to an interface not implementation, this align with point 1 also dependency inversion

 "When designing application, we can first anticipate part that are changing and build the flexibility to deal with it"
 "Combination between interface & subclassing is good for inheriting common behavior and to have good interface segregation"

 3. Favor composition over inheritance, inheritance limits flexibility of composing behaviors, because we don't know what changes will be
 made to the system, inheritance limits our ability to deal with that changes.

 4. Prefer loosely coupled design that can handle changes because they minimize interdependency between objects

 5. Class should be open for extensions but closed for modification. for example : by favoring composition over inheritance we can alter
 behavior of a class at runtime dynamically without changing the code which is the contras of inheritance ( subclass has same
 behavior set statically at compile time ).

 6. Be careful when choosing area of code to apply open closed principle, applying it everywhere is wasteful, unnecessary
 & can lead to hard to understand & complex code.

 7. When you have instantiate series of class that based on some conditions, when it comes to extensions/change either when you want to add
 or delete certain instantiate, you need to open it. often this kind of code ends up in several part of code making maintenance more difficult.

 8. insulating `new` inside a class allow us to deal with change of instantiation in one place, we let the code deal with
 the implementation through polymorphism this way when adding new class that implement that interface we don't have to reopen the class

 9. One good symptom when you need abstract factory method is when you have two variables used in nested if that provides
 conditions on which object to instantiate

 10. Depend upon abstraction. Do not depend upon concrete classes.

 11. Dependency inversion inverts our design to think through abstraction on high level, several points that violate it :
    - No variable should hold a reference to a concrete class
    - No class should derive from a concrete class
    - No method should override from an implemented method of its base classes

 12. With singleton pattern, you let a class manage its own instance and make its instantiation lazy, also we provide global single
 access point so we just query and it return it instance

 13. use synchronize to ensure all thread access one at a time. but it slow method by factor of 100. use it if no performance impact.
 dont use it if high traffic accessing getInstance()

 14. If getInstance() is always accessed or cost of creation is small, use static initializer (Eager initialization), this is guaranteed to be thread safe
 and doesn't incur performance penalty on getInstance() because it's ready guaranteed by JVM before all thread can access it.

 15. the difference between strategy pattern and command pattern is that command pattern has invoker object that invoke the "strategy" object while
  strategy pattern invokes the object directly.

 OO patterns
 1. Strategy -

 2. Observer - one to many relationship between object so when one data is updated, all dependant object is also notified

 3. Decorator - Add responsibilities dynamically to object which is alternative to subclassing

 4. Abstract Factory pattern -

 5. Singleton - pattern to create single instance of a class with single global access point

 6. Command - encapsulate a request as an object thus allowing us to parameterized other object with different request
 queue or log requests, and support undoable operations.

 7.