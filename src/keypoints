OO Principles

1. Separate what varies and what stays. encapsulate what varies so it wont affect your system when changed.

2. Program to an interface not implementation, this align with point 1 also dependency inversion

 "When designing application, we can first anticipate part that are changing and build the flexibility to deal with it"
 "Combination between interface & subclassing is good for inheriting common behavior and to have good interface segregation"

 3. Favor composition over inheritance, inheritance limits flexibility of composing behaviors, because we don't know what changes will be
 made to the system, inheritance limits our ability to deal with that changes.

 4. Prefer loosely coupled design that can handle changes because they minimize interdependency between objects

 5. Class should be open for extensions but closed for modification. for example : by favoring composition over inheritance we can alter
 behavior of a class at runtime dynamically without changing the code which is the contras of inheritance ( subclass has same
 behavior set statically at compile time ).

 6. Be careful when choosing area of code to apply open closed principle, applying it everywhere is wasteful, unnecessary
 & can lead to hard to understand & complex code.

 7. When you have instantiate series of class that based on some conditions, when it comes to extensions/change either when you want to add
 or delete certain instantiate, you need to open it. often this kind of code ends up in several part of code making maintenance more difficult.

 8. insulating `new` inside a class allow us to deal with change of instantiation in one place, we let the code deal with
 the implementation through polymorphism this way when adding new class that implement that interface we don't have to reopen the class

 9. One good symptom when you need abstract factory method is when you have two variables used in nested if that provides
 conditions on which object to instantiate

 10. Depend upon abstraction. Do not depend upon concrete classes.

 11. Dependency inversion inverts our design to think through abstraction on high level, several points that violate it :
    - No variable should hold a reference to a concrete class
    - No class should derive from a concrete class
    - No method should override from an implemented method of its base classes

 12. With singleton pattern, you let a class manage its own instance and make its instantiation lazy, also we provide global single
 access point so we just query and it return it instance

 13. use synchronize to ensure all thread access one at a time. but it slow method by factor of 100. use it if no performance impact.
 don't use it if high traffic accessing getInstance()

 14. If getInstance() is always accessed or cost of creation is small, use static initializer (Eager initialization), this is guaranteed to be thread safe
 and doesn't incur performance penalty on getInstance() because it's ready guaranteed by JVM before all thread can access it.

 15. the difference between strategy pattern and command pattern is that command pattern has invoker object that invoke the "strategy" object while
  strategy pattern invokes the object directly.

 16. Adapter pattern saves me from reimplementing adaptee class, adapter allows client to use target interface.

 17. Principle of Least Knowledge - talk only to your immediate friends ( creating system that knows too much of each other subsystem
 create highly couple classes and will make maintenance hard because changes in one part will impact a lot of places.

 18. Dependency Rot - when high level component depends on low level component depends on high level depends on side way components.
 this makes the system design hard to understand.

 19. Hollywood principle - 'Don't call us, we'll call you' low level component is called by high level component, low level
 component only hook themselves to high level, high level determine when and how low level is used.

 20. Dependency inversion dictate general principle to decouple by depending on abstract to avoid too much dependency on concrete.
 while hollywood principle provide technique to make low level component hooked into computation in high level component
 without creating too much dependency.

 21. Collection or aggregated object can be represented by many data structure, therefore we need a uniform way to step
 through all elements so we can iterate in a polymorphic way. iterator pattern is the answer.

 22. Iterator pattern has iterator interface and aggregate interface, aggregate interface decides which concrete iterator
 gets instantiated, this is almost similar to the concept of factory pattern.

 23. External iterator lets client hold the iterator object and use it however they want while internal iterator performs iteration inside
 the aggregate object, client must pass in operation that performed on each iteration, this is less flexible compared to external iterator

 24. modifying class for more than one reason provides opportunity for problem to creeps in. when code inside a class has low
 cohesion between each other that mean it has more than one responsibility and can be extracted into separate class. cohesion is grouping of
 rateable object.

 25. Sometimes our design seems to violates our principles, but in some cases it just a matter of perspective. for instance,
 it might seems incorrect to have child management operations in leaf node but we can always shift our perspective to see
 leaf node as parent node that has zero children

 26. State pattern localize the behavior of different state so when we add new one we have little chance to unintentionally change
 existing state

 27. State pattern transition between each state discretely, each state may know each other state. while strategy pattern
 transition behavior in runtime explicitly and controlled by client. each strategy my not know each other.

 OO patterns
 1. Strategy - Encapsulate interchangeable behavior and use delegation decide which behavior to use ( not stuck with inheritance )

 2. Observer - one to many relationship between object so when one data is updated, all dependant object is also notified

 3. Decorator - Add responsibilities dynamically to object which is alternative to subclassing

 4. Abstract Factory pattern - Subclass decides which class to create

 5. Singleton - pattern to create single instance of a class with single global access point

 6. Command - encapsulate a request as an object thus allowing us to parameterized other object with different request
 queue or log requests, and support undoable operations.

 7. Adapter - adapt different types of interface allowing client to use target interface

 8. Facade - simplified interface to access subsystem while still let client use the subsystem classes, this DP decouple
 client from complex system

 9. Template - Provide series of steps ( outlining a program ) as template and let subclass implement some of the steps without changing the
 structure of the algorithm ( subclass decides how to implement a step of algorithm )

 10. Iterator - provide way to iterate over collection of object without exposing the underlying data structure of the collection.

 11. Composite - is a tree-like structure of part-whole where we can use an operation on both the whole or the part of the structure ( treat uniformly )

 12. State - Change object behavior when its internal state is changes.

